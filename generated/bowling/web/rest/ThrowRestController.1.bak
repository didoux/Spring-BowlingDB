package bowling.web.rest;

import bowling.dao.ThrowDAO;

import bowling.domain.Throw;

import bowling.service.ThrowService;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;

import org.springframework.web.bind.WebDataBinder;

import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;


/**
 * Spring Rest controller that handles CRUD requests for Throw entities
 * 
 */

@Controller("ThrowRestController")

	
public class ThrowRestController 
		{
	
	
	
		
		

/**
 * DAO injected by Spring that manages Throw entities
 * 
 */
@Autowired
private ThrowDAO throwDAO;

/**
 * Service injected by Spring that provides CRUD operations for Throw entities
 * 
 */
@Autowired
private ThrowService throwService;
 	
	
/**
 * Register custom, context-specific property editors
 * 
 */
@InitBinder  public void initBinder (WebDataBinder binder,HttpServletRequest request)  
{	// Register static property editors.
	binder.registerCustomEditor(java.util.Calendar.class, new org.skyway.spring.util.databinding.CustomCalendarEditor());
	binder.registerCustomEditor(byte[].class, new org.springframework.web.multipart.support.ByteArrayMultipartFileEditor());
	binder.registerCustomEditor(boolean.class, new org.skyway.spring.util.databinding.EnhancedBooleanEditor(false));
	binder.registerCustomEditor(Boolean.class, new org.skyway.spring.util.databinding.EnhancedBooleanEditor(true));
	binder.registerCustomEditor(java.math.BigDecimal.class, new org.skyway.spring.util.databinding.NaNHandlingNumberEditor(java.math.BigDecimal.class, true));
	binder.registerCustomEditor(Integer.class, new org.skyway.spring.util.databinding.NaNHandlingNumberEditor(Integer.class, true));
	binder.registerCustomEditor(java.util.Date.class, new org.skyway.spring.util.databinding.CustomDateEditor());
	binder.registerCustomEditor(String.class, new org.skyway.spring.util.databinding.StringEditor());
	binder.registerCustomEditor(Long.class, new org.skyway.spring.util.databinding.NaNHandlingNumberEditor(Long.class, true));
	binder.registerCustomEditor(Double.class, new org.skyway.spring.util.databinding.NaNHandlingNumberEditor(Double.class, true));
	}/**
 * Delete an existing Throw entity
 * 
 */
@RequestMapping(value="/Throw/{throw_id}", method=RequestMethod.DELETE)@ResponseBody  public void deleteThrow (@PathVariable Integer throw_id)  
{Throw throw = throwDAO.findThrowByPrimaryKey(throw_id);
throwService.deleteThrow(throw);
}/**
 * Save an existing Throw entity
 * 
 */
@RequestMapping(value="/Throw", method=RequestMethod.PUT)@ResponseBody  public Throw saveThrow (@RequestBody Throw throw)  
{throwService.saveThrow(throw);
return throwDAO.findThrowByPrimaryKey(throw.getId());
}/**
 * Create a new Throw entity
 * 
 */
@RequestMapping(value="/Throw", method=RequestMethod.POST)@ResponseBody  public Throw newThrow (@RequestBody Throw throw)  
{throwService.saveThrow(throw);
return throwDAO.findThrowByPrimaryKey(throw.getId());
}/**
 * Show all Throw entities
 * 
 */
@RequestMapping(value="/Throw", method=RequestMethod.GET)@ResponseBody  public List<Throw> listThrows ()  
{return new java.util.ArrayList<Throw>(throwService.loadThrows());
}/**
 * Select an existing Throw entity
 * 
 */
@RequestMapping(value="/Throw/{throw_id}", method=RequestMethod.GET)@ResponseBody  public Throw loadThrow (@PathVariable Integer throw_id)  
{return throwDAO.findThrowByPrimaryKey(throw_id);
}}